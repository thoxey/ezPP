#ifndef EZPOSTPROCESSOR_H
#define EZPOSTPROCESSOR_H
#define DEBUGEZPPER
#include <vector>
#include <iostream>
#include <algorithm>
#ifndef __APPLE__
#include <GL/glew.h>
#include <GL/gl.h>
#else
#include <gl3.h>
#endif
#include "ezeffect.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file ezPostProcessor.h
/// @brief The 'master class' that handles the storage, processing, and exectuction of the effects
/// @author Tom Hoxey
/// @version 1.0
/// @date 20/3/17 Initial version
//----------------------------------------------------------------------------------------------------------------------

class ezPostProcessor
{
public:
  //Constructer & Destructor
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor
  //----------------------------------------------------------------------------------------------------------------------
  ezPostProcessor();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor
  //----------------------------------------------------------------------------------------------------------------------
  ~ezPostProcessor();
  //ez Functions
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Initializes the ezPPer with data from the users GL context
  //----------------------------------------------------------------------------------------------------------------------
  void ezInit(int _screenWidth, int screenHeight);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Resizes our FBO texture
  //----------------------------------------------------------------------------------------------------------------------
  void ezResize(int _screenWidth, int screenHeight);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief adds an effect to the master vector to be compiled, will become template function to accept presets in future
  //----------------------------------------------------------------------------------------------------------------------
  void ezAddEffect(ezEffect *_addedEffect);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief captres scene to framebuffer and creates texture
  //----------------------------------------------------------------------------------------------------------------------
  void ezCapture();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief applies 'compiled' texture to our camera covering quad
  //----------------------------------------------------------------------------------------------------------------------
  void ezRender(GLuint frameBuffer = 0);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief alternative dtor, clears buffers with killing PPer if needed
  //----------------------------------------------------------------------------------------------------------------------
  void ezCleanUp();


private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector of effects on the current scene
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<ezEffect*> m_effectMasterVector;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief stores the active shaders
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Used to check that init has been called before
  //----------------------------------------------------------------------------------------------------------------------
  bool m_inited, m_captured;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The width and height of the screen
  //----------------------------------------------------------------------------------------------------------------------
  int m_screenWidth, m_screenHeight;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The VAO and the VBO for the screen space quad
  //----------------------------------------------------------------------------------------------------------------------
  GLuint quadVAO, quadVBO;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The frame buffer objects that we will manipulate
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_framebuffer[2];
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The color buffer attacthments that we will manipulate
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_textureColorbuffer[2];
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief The depth stencil attacthments that we will manipulate
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_DepthStencil[2];
};

#endif // EZPOSTPROCESSOR_H
